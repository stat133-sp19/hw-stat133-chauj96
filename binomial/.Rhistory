})
# check_success()
test_that("check success function works well", {
expect_true(check_success(2, 3))
expect_length(check_success(2, 3), 1)
expect_error(check_success(4, 3))
})
test_that("/Users/Yujin/binomial/tests/test-binomial.R")
test_that("test-binomial.R")
a <- bin_probability(3, 2, 0.4)
a <- expect_equal(bin_choose(3, 1), 3)
isTRUE(a)
expect_equal(bin_choose(3, 1), 3)
bin_choose(3, 1)
is_true(expect_equal(bin_choose(3, 1), 3))
source("/Users/Yujin/binomial/R/binomial.R")
##### Function check_prob()
check_prob <- function(prob = 0) {
if (prob < 0 || prob > 1) {
stop("p hast to be a number between 0 and 1")
}
return(TRUE)
}
##### Function check_trials()
check_trials <- function(trials = 0) {
if (trials != round(trials) || trials < 0){
stop("invalid trials value")
}
return(TRUE)
}
##### Function check_success()
check_success <- function(success, trials) {
for (i in success) {
if (i > trials || i < 0) {
stop("invalid success value")
}
}
return(TRUE)
}
##### Mean Function
aux_mean <- function(trials, prob) {
mean <- trials * prob
return(mean)
}
##### Variance Function
aux_variance <- function(trials, prob) {
variance <- trials * prob * (1 - prob)
return(variance)
}
##### Mode Function
aux_mode <- function(trials, prob) {
mode <- floor(trials * prob + prob)
return(mode)
}
##### Skewness Function
aux_skewness <- function(trials, prob) {
skewness <- (1 - 2 * prob) / sqrt(trials * prob * (1 - prob))
return(skewness)
}
##### Kurtosis Function
aux_kurtosis <- function(trials, prob) {
kurtosis <- (1 - 6 * prob * (1 - prob)) / (trials * prob * (1 - prob))
return(kurtosis)
}
bin_choose <- function(trials, success) {
if (success > trials) {
stop("successes cannot be greater than trials")
}
choose <- factorial(trials) / (factorial(success) * factorial(trials - success))
return(choose)
}
bin_probability <- function(success, trials, prob) {
if (check_trials(trials) == FALSE) {
stop("invalid trials value")
}
else if (check_prob(prob) == FALSE) {
stop("invalid probability value")
}
else if (check_success(success, trials) == FALSE) {
stop("invalid success value")
}
else {
probability <- bin_choose(trials, success)*(prob^success)*(1-prob)^(trials - success)
return(probability)
}
}
bin_distribution <- function(trials, prob) {
df <- c()
success <- (0:trials)
for (i in success) {
distrib <- bin_probability(i, trials, prob)
df <- c(df, distrib)
}
df2 <- data.frame(success, "probability" = df)
class(df2) <- c("bindis", "data.frame")
return(df2)
}
#' @export
plot.bindis <- function(x) {
barplot(x$probability, names.arg = x$success, ylab = "probability", xlab = "success")
}
bin_cumulative <- function(trials, prob) {
cum_df <- c()
success <- (0:trials)
for (i in success) {
distrib2 <- bin_probability(i, trials, prob)
cum_df <- c(cum_df, distrib2)
}
cum_prob <- c()
prob <- 0
for (i in 1:length(cum_df)) {
prob <- prob + cum_df[i]
cum_prob <- append(cum_prob, prob)
}
cum_df2 <- data.frame(success, "probability" = cum_df, "cumulative" = cum_prob)
class(cum_df2) <- c("bincum", "data.frame")
return(cum_df2)
}
#' @export
plot.bincum <- function(k) {
plot(k$success, k$cumulative, ylab = "probability", xlab = "success")
lines(k$success, k$cumulative, type = "o")
}
bin_variable <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
ls <- list(trials, prob)
names(ls) <- c("trials", "prob")
class(ls) <- "binvar"
return(ls)
}
##### Method print.binvar()
#' @export
print.binvar <- function(x) {
cat('"Binomial variable"', "\n","\n")
cat("Parameters", "\n")
cat("- number of trials:", x$trials, "\n")
cat("- prob of success :", x$prob)
}
##### Methods summary.binvar() and print.summary.binvar()
#' @export
summary.binvar <- function(x) {
mean <- aux_mean(x$trials, x$prob)
variance <- aux_variance(x$trials, x$prob)
mode <- aux_mode(x$trials, x$prob)
skewness <- aux_skewness(x$trials, x$prob)
kurtosis <- aux_kurtosis(x$trials, x$prob)
vec <- list(x$trials, x$prob, mean, variance, mode, skewness, kurtosis)
names(vec) <- c("trials", "prob", "mean", "variance", "mode", "skewness", "kurtosis")
class(vec) <- "summary.binvar"
return(vec)
}
#' @export
print.summary.binvar <- function(x) {
cat('"Summary Binomial"', "\n","\n")
cat("Parameters", "\n")
cat("- number of trials:", x$trials, "\n")
cat("- prob of success :", x$prob, "\n","\n")
cat("Measures", "\n")
cat("- mean    :", summary.binvar(x)$mean, "\n")
cat("- variance:", summary.binvar(x)$variance, "\n")
cat("- mode    :", summary.binvar(x)$mode, "\n")
cat("- skewness:", summary.binvar(x)$skewness, "\n")
cat("- kurtosis:", summary.binvar(x)$kurtosis, "\n")
}
bin_mean <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
binMean <- aux_mean(trials, prob)
return(binMean)
}
bin_variance <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
binVar <- aux_variance(trials, prob)
return(binVar)
}
bin_mode <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
binMode <- aux_mode(trials, prob)
return(binMode)
}
bin_skewness <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
binSkew <- aux_skewness(trials, prob)
return(binSkew)
}
bin_kurtosis <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
binKurt <- aux_kurtosis(trials, prob)
return(binKurt)
}
devtools::test()
check_success(3,4)
length(check_success(2,3))
library(binomial)
getwd()
install.packages("binomial")
install.packages("binomial")
library(binomial)
##### Function check_prob()
check_prob <- function(prob = 0) {
if (prob < 0 || prob > 1) {
stop("p hast to be a number between 0 and 1")
}
return(TRUE)
}
##### Function check_trials()
check_trials <- function(trials = 0) {
if (trials != round(trials) || trials < 0){
stop("invalid trials value")
}
return(TRUE)
}
##### Function check_success()
check_success <- function(success, trials) {
for (i in success) {
if (i > trials || i < 0) {
stop("invalid success value")
}
}
return(TRUE)
}
##### Mean Function
aux_mean <- function(trials, prob) {
mean <- trials * prob
return(mean)
}
##### Variance Function
aux_variance <- function(trials, prob) {
variance <- trials * prob * (1 - prob)
return(variance)
}
##### Mode Function
aux_mode <- function(trials, prob) {
mode <- floor(trials * prob + prob)
return(mode)
}
##### Skewness Function
aux_skewness <- function(trials, prob) {
skewness <- (1 - 2 * prob) / sqrt(trials * prob * (1 - prob))
return(skewness)
}
##### Kurtosis Function
aux_kurtosis <- function(trials, prob) {
kurtosis <- (1 - 6 * prob * (1 - prob)) / (trials * prob * (1 - prob))
return(kurtosis)
}
bin_choose <- function(trials, success) {
if (success > trials) {
stop("successes cannot be greater than trials")
}
choose <- factorial(trials) / (factorial(success) * factorial(trials - success))
return(choose)
}
bin_probability <- function(success, trials, prob) {
if (check_trials(trials) == FALSE) {
stop("invalid trials value")
}
else if (check_prob(prob) == FALSE) {
stop("invalid probability value")
}
else if (check_success(success, trials) == FALSE) {
stop("invalid success value")
}
else {
probability <- bin_choose(trials, success)*(prob^success)*(1-prob)^(trials - success)
return(probability)
}
}
bin_distribution <- function(trials, prob) {
df <- c()
success <- (0:trials)
for (i in success) {
distrib <- bin_probability(i, trials, prob)
df <- c(df, distrib)
}
df2 <- data.frame(success, "probability" = df)
class(df2) <- c("bindis", "data.frame")
return(df2)
}
#' @export
plot.bindis <- function(x) {
barplot(x$probability, names.arg = x$success, ylab = "probability", xlab = "success")
}
bin_cumulative <- function(trials, prob) {
cum_df <- c()
success <- (0:trials)
for (i in success) {
distrib2 <- bin_probability(i, trials, prob)
cum_df <- c(cum_df, distrib2)
}
cum_prob <- c()
prob <- 0
for (i in 1:length(cum_df)) {
prob <- prob + cum_df[i]
cum_prob <- append(cum_prob, prob)
}
cum_df2 <- data.frame(success, "probability" = cum_df, "cumulative" = cum_prob)
class(cum_df2) <- c("bincum", "data.frame")
return(cum_df2)
}
#' @export
plot.bincum <- function(k) {
plot(k$success, k$cumulative, ylab = "probability", xlab = "success")
lines(k$success, k$cumulative, type = "o")
}
bin_variable <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
ls <- list(trials, prob)
names(ls) <- c("trials", "prob")
class(ls) <- "binvar"
return(ls)
}
##### Method print.binvar()
#' @export
print.binvar <- function(x) {
cat('"Binomial variable"', "\n","\n")
cat("Parameters", "\n")
cat("- number of trials:", x$trials, "\n")
cat("- prob of success :", x$prob)
}
##### Methods summary.binvar() and print.summary.binvar()
#' @export
summary.binvar <- function(x) {
mean <- aux_mean(x$trials, x$prob)
variance <- aux_variance(x$trials, x$prob)
mode <- aux_mode(x$trials, x$prob)
skewness <- aux_skewness(x$trials, x$prob)
kurtosis <- aux_kurtosis(x$trials, x$prob)
vec <- list(x$trials, x$prob, mean, variance, mode, skewness, kurtosis)
names(vec) <- c("trials", "prob", "mean", "variance", "mode", "skewness", "kurtosis")
class(vec) <- "summary.binvar"
return(vec)
}
#' @export
print.summary.binvar <- function(x) {
cat('"Summary Binomial"', "\n","\n")
cat("Parameters", "\n")
cat("- number of trials:", x$trials, "\n")
cat("- prob of success :", x$prob, "\n","\n")
cat("Measures", "\n")
cat("- mean    :", summary.binvar(x)$mean, "\n")
cat("- variance:", summary.binvar(x)$variance, "\n")
cat("- mode    :", summary.binvar(x)$mode, "\n")
cat("- skewness:", summary.binvar(x)$skewness, "\n")
cat("- kurtosis:", summary.binvar(x)$kurtosis, "\n")
}
bin_mean <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
binMean <- aux_mean(trials, prob)
return(binMean)
}
bin_variance <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
binVar <- aux_variance(trials, prob)
return(binVar)
}
bin_mode <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
binMode <- aux_mode(trials, prob)
return(binMode)
}
bin_skewness <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
binSkew <- aux_skewness(trials, prob)
return(binSkew)
}
bin_kurtosis <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
binKurt <- aux_kurtosis(trials, prob)
return(binKurt)
}
devtools::document()
library(binomial)
bin_distribution(5, 0.5)
plot(bin_distribution(5, 0.5))
devtools::check_man()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
devtools::install()
library(binomial)
# bin_choose()
bin_choose(5, 4)
library(binomial)
# bin_choose()
bin_choose(5, 4)
# bin_probability()
bin_probability(3, 5, 0.5)
library(binomial)
# bin_choose()
bin_choose(5, 4)
# bin_probability()
bin_probability(3, 5, 0.5)
# bin_distribution()
bin_distribution(5, 0.5)
library(binomial)
# bin_choose()
bin_choose(5, 4)
# bin_probability()
bin_probability(3, 5, 0.5)
# bin_distribution()
data1 <- bin_distribution(5, 0.5)
plot(data1)
plot(data2)
library(binomial)
# bin_choose()
bin_choose(5, 4)
# bin_probability()
bin_probability(3, 5, 0.5)
# bin_distribution()
data1 <- bin_distribution(5, 0.5)
plot(data1)
# bin_cumulative()
data2 <- bin_cumulative(5, 0.5)
plot(data2)
library(binomial)
# bin_choose()
bin_choose(5, 4)
# bin_probability()
bin_probability(3, 5, 0.5)
# bin_distribution()
data1 <- bin_distribution(5, 0.5)
plot(data1)
# bin_cumulative()
data2 <- bin_cumulative(5, 0.5)
plot(data2)
# bin_variable()
bin1 <- bin_variable(trials = 10, prob = 0.3)
bin1
library(binomial)
# bin_choose()
bin_choose(5, 4)
# bin_probability()
bin_probability(3, 5, 0.5)
# bin_distribution()
data1 <- bin_distribution(5, 0.5)
plot(data1)
# bin_cumulative()
data2 <- bin_cumulative(5, 0.5)
plot(data2)
# bin_variable()
bin1 <- bin_variable(trials = 10, prob = 0.3)
binsum1 <- summary(bin1)
binsum1
library(binomial)
# bin_choose()
bin_choose(5, 4)
# bin_probability()
bin_probability(3, 5, 0.5)
# bin_distribution()
data1 <- bin_distribution(5, 0.5)
plot(data1)
# bin_cumulative()
data2 <- bin_cumulative(5, 0.5)
plot(data2)
# bin_variable()
bin1 <- bin_variable(trials = 10, prob = 0.3)
bin1
binsum1 <- summary(bin1)
binsum1
library(binomial)
# bin_choose()
bin_choose(5, 4)
# bin_probability()
bin_probability(3, 5, 0.5)
# bin_distribution() and its plotting
data1 <- bin_distribution(5, 0.5)  # the user can plot data1 by plot(data1)
data1
# bin_cumulative() and its plotting
data2 <- bin_cumulative(5, 0.5)
data2  # the user can plot data2 by plot(data2)
# bin_variable() and its summary
bin1 <- bin_variable(trials = 10, prob = 0.3)
bin1
binsum1 <- summary(bin1)
binsum1
# bin_mean()
bin_mean(10, 0.3)
# bin_variance()
bin_variable(10, 0.3)
# bin_mode()
bin_mode(10, 0.3)
# bin_skewness()
bin_skewness(10, 0.3)
# bin_kurtosis()
bin_kurtosis(10, 0.3)
library(binomial)
bin_choose(4, 3)
rm(list = ls())
library(binomial)
bin_probability(1,2,10)
bin_probability(1:5, 10, 0.5)
bin_probability(1, 10, 0.5)
bin_probability(5, 10, 0.5)
bin_probability(1:5, 10, 0.5)
bin_probability(1:5, 10, 0.5)
plot(bin_probability(1:5, 10, 0.5))
plot(bin_cumulative(10, 0.5))
bin_probability(1:5, 10, -0.5)
devtools::test()
devtools::build_vignettes()
